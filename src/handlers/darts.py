import asyncio
import math
import time

from aiogram import types, F
from aiogram.exceptions import TelegramRetryAfter
from aiogram.filters import Command
from aiogram.utils.formatting import Text, Code, TextMention

from src.database import Database
from src.filters import CooldownFilter, IsChat, IsCurrentUser, GamesFilter
from src.handlers.games import games_router
from src.types import Games, BetButtonType, BetCallback, BaseGameCallback, BaseGameEnum
from src.utils import TextBuilder
from src.utils.game_messages import get_darts_message
from src.utils.utils import process_regular_bet


@games_router.message(Command(Games.DARTS), IsChat(), CooldownFilter(Games.DARTS, True), GamesFilter())
async def darts_command(message: types.Message, chat_user):
    tb, kb = get_darts_message(chat_user, message.from_user)
    await message.answer(tb.render(), reply_markup=kb.as_markup())


@games_router.callback_query(BetCallback.filter((F.action == BetButtonType.BET) & (F.game == Games.DARTS)),
                             IsCurrentUser(True))
async def darts_callback_bet(callback: types.CallbackQuery, callback_data: BetCallback, chat_user):
    await process_regular_bet(callback, callback_data, chat_user, BaseGameCallback, "üéØ", 2, Games.DARTS)


@games_router.callback_query(BaseGameCallback.filter((F.action == BaseGameEnum.PLAY) & (F.game == Games.DARTS)),
                             IsCurrentUser(True))
async def darts_callback_bet_play(callback: types.CallbackQuery, callback_data: BaseGameCallback, db: Database, chat_user):
    balance = chat_user[3]
    chat_id = callback.message.chat.id
    current_time = int(time.time())
    await callback.message.edit_text(Text("üéØ –£ —Ç–≤–æ—î—ó —Å–µ—Å—Ç—Ä–∏ —Ç–∞–∫–∏–π —Å–æ–ª–æ–¥–∫–∏–π –≤–∞—Ä–µ–Ω–∏–∫").as_markdown())

    user = TextMention(callback.from_user.first_name, user=callback.from_user)
    darts_value = (await callback.message.reply_dice(emoji='üéØ')).dice.value

    tb = TextBuilder(user=user)

    if darts_value == 6:
        bet_won = math.ceil(callback_data.bet * 2)
        new_balance = balance + bet_won
        tb.add("üèÜ {user}, –ø—î—Ä—î–º–æ–≥–∞")
        tb.add("üéØ –¢–∏ –≤–∏–≥—Ä–∞–≤: {bet_won} –∫–≥\n", True, bet_won=Code(bet_won))
        tb.add("üè∑Ô∏è –í —Ç–µ–±–µ: {new_balance} –∫–≥", True, new_balance=Code(new_balance))
    elif darts_value in [4, 5]:
        bet_won = math.ceil(callback_data.bet)
        new_balance = balance
        tb.add("üèÜ {user} –±–ª—è —à–æ –∑–∞ —Ä–∞—Ö—ñ—Ç –≥—Ä–∞—î")
        tb.add("üéØ –¢–∏ –ø–æ–≤–µ—Ä–Ω—É–≤: {bet_won} –∫–≥\n", True, bet_won=Code(bet_won))
        tb.add("üè∑Ô∏è –í —Ç–µ–±–µ: {new_balance} –∫–≥", True, new_balance=Code(new_balance))
    else:
        new_balance = balance - callback_data.bet
        tb.add("üòî {user} –≤—ñ–¥—Å–º–æ–∫—Ç–∞–≤")
        tb.add("üéØ –ü—Ä–æ–π–æ–±: {bet} –∫–≥\n", True, bet=Code(callback_data.bet))
        tb.add("üè∑Ô∏è –í —Ç–µ–±–µ: {new_balance} –∫–≥", True, new_balance=Code(new_balance))
    await asyncio.sleep(4)
    try:
        await callback.bot.answer_callback_query(callback.id, "–ö–∞–Ω–∞ÃÅ–±—ñ—Å (–ª–∞—Ç. C√°nnabis) ‚Äî —É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–∞ –Ω–∞–∑–≤–∞, —â–æ –æ–±'—î–¥–Ω—É—î –Ω–∏–∑–∫—É –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω, –æ–¥–µ—Ä–∂—É–≤–∞–Ω–∏—Ö –∑ —á–∞—Å—Ç–∏–Ω –∫–≤—ñ—Ç—É—á–∏—Ö —Ä–æ—Å–ª–∏–Ω —Ä–æ–¥—É –∫–æ–Ω–æ–ø–ª—ñ. –ú–∞—Ä–∏—Ö—É–∞ÃÅ–Ω–∞, –≥–∞—à–∏—à —ñ –≥–∞—à–∏—à–Ω–µ –º–∞—Å–ª–æ —î –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ —Ç–∞–∫–∏—Ö –∑–∞—Å–æ–±—ñ–≤")
        await callback.message.edit_text(tb.render())
    except TelegramRetryAfter:
        pass
    else:
        await db.cooldown.update_user_cooldown(chat_id, callback.from_user.id, Games.DARTS, current_time)
        await db.chat_user.update_user_russophobia(chat_id, callback.from_user.id, new_balance)
